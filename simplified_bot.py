#!/usr/bin/env python3
"""
Simplified 28-day Sobriety Challenge Telegram Bot
with physical exercise recommendations and better daily questions
"""

import json
import random
import logging
import asyncio
from datetime import datetime, timedelta
from aiogram import Bot, Dispatcher, types, Router, F
from aiogram.filters import Command
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from ai_motivator import generate_personalized_motivation, generate_urge_support_message, generate_reflection_prompt, test_ai_connection

# Bot configuration
API_TOKEN = '8138434558:AAF6TOL-K_LMAQiIIQvJmclLs9nGRc1ThO8'

# Initialize bot components
bot = Bot(token=API_TOKEN)
dp = Dispatcher()
router = Router()
scheduler = AsyncIOScheduler()

# Data storage
user_data = {}
DATA_FILE = 'user_data.json'

# Load existing data
try:
    with open(DATA_FILE, 'r', encoding='utf-8') as f:
        user_data = json.load(f)
except FileNotFoundError:
    user_data = {}

def save_data():
    """Save user data to JSON file"""
    with open(DATA_FILE, 'w', encoding='utf-8') as f:
        json.dump(user_data, f, indent=4, ensure_ascii=False)

# Day-specific motivations
MOTIVATIONS_BY_DAY = {
    1: "üß† –î–µ–Ω—å 1: –¢—ã —Å–¥–µ–ª–∞–ª –ø–µ—Ä–≤—ã–π —à–∞–≥. –£–∂–µ —á–µ—Ä–µ–∑ 24 —á–∞—Å–∞ –Ω–∞—á–∏–Ω–∞—é—Ç —Å–Ω–∏–∂–∞—Ç—å—Å—è —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å –∏ –¥–∞–≤–ª–µ–Ω–∏–µ.",
    2: "üíß –î–µ–Ω—å 2: –û—Ä–≥–∞–Ω–∏–∑–º –Ω–∞—á–∏–Ω–∞–µ—Ç –≤—ã–º—ã–≤–∞—Ç—å —Ç–æ–∫—Å–∏–Ω—ã. –¢–≤–æ–∏ –ø–æ—á–∫–∏ –∏ –ø–µ—á–µ–Ω—å —Ä–∞–±–æ—Ç–∞—é—Ç –∞–∫—Ç–∏–≤–Ω–µ–µ.",
    3: "üò¥ –î–µ–Ω—å 3: –°–æ–Ω –º–æ–∂–µ—Ç –±—ã—Ç—å –±–µ—Å–ø–æ–∫–æ–π–Ω—ã–º ‚Äî —ç—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ. –ú–æ–∑–≥ –∞–¥–∞–ø—Ç–∏—Ä—É–µ—Ç—Å—è –∫ –∂–∏–∑–Ω–∏ –±–µ–∑ –∞–ª–∫–æ–≥–æ–ª—è.",
    4: "ü´Ä –î–µ–Ω—å 4: –î–∞–≤–ª–µ–Ω–∏–µ —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è, —Å–µ—Ä–¥–µ—á–Ω—ã–π —Ä–∏—Ç–º –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç—Å—è. –¢—ã —Å—Ç–∞–ª —Å–ø–æ–∫–æ–π–Ω–µ–µ.",
    5: "ü¶∑ –î–µ–Ω—å 5: –£–ª—É—á—à–∞–µ—Ç—Å—è –¥—ã—Ö–∞–Ω–∏–µ –∏ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª–æ—Å—Ç–∏ —Ä—Ç–∞. –¢—ã –ø–∞—Ö–Ω–µ—à—å –ª—É—á—à–µ ‚Äî —Ñ–∞–∫—Ç!",
    6: "üí™ –î–µ–Ω—å 6: –≠–Ω–µ—Ä–≥–∏—è –Ω–∞—á–∏–Ω–∞–µ—Ç –≤–æ–∑–≤—Ä–∞—â–∞—Ç—å—Å—è. –î–∞–∂–µ –µ—Å–ª–∏ —É—Å—Ç–∞—ë—à—å ‚Äî —Ç—ã –ø—Ä–æ—Å—ã–ø–∞–µ—à—å—Å—è –ª–µ–≥—á–µ.",
    7: "üåô –î–µ–Ω—å 7: –¢—ã –ø—Ä–æ–∂–∏–ª –Ω–µ–¥–µ–ª—é —Ç—Ä–µ–∑–≤–æ—Å—Ç–∏. –°–æ–Ω —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –≥–ª—É–±–∂–µ, –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å—Ç–∞–±–∏–ª—å–Ω–µ–µ.",
    8: "üßº –î–µ–Ω—å 8: –ö–æ–∂–∞ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è —á–∏—â–µ, —Ü–≤–µ—Ç –ª–∏—Ü–∞ ‚Äî —Ä–æ–≤–Ω–µ–µ. –û—Ä–≥–∞–Ω–∏–∑–º –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç –æ—á–∏—â–µ–Ω–∏–µ.",
    9: "ü´Å –î–µ–Ω—å 9: –£–ª—É—á—à–∞–µ—Ç—Å—è –Ω–∞—Å—ã—â–µ–Ω–∏–µ –∫–∏—Å–ª–æ—Ä–æ–¥–æ–º. –¢—ã –¥—ã—à–∏—à—å –ª–µ–≥—á–µ –∏ –≥–ª—É–±–∂–µ.",
    10: "üßò –î–µ–Ω—å 10: –≠–º–æ—Ü–∏–∏ —Å—Ç–∞–Ω–æ–≤—è—Ç—Å—è —É—Å—Ç–æ–π—á–∏–≤–µ–µ. –¢—ã –≤—Å—ë –±–æ–ª—å—à–µ —É–ø—Ä–∞–≤–ª—è–µ—à—å —Å–æ–±–æ–π.",
    11: "üåø –î–µ–Ω—å 11: –£—Ö–æ–¥–∏—Ç –æ—â—É—â–µ–Ω–∏–µ '–ø–æ—Ö–º–µ–ª—å–Ω–æ–π —Ç—Ä–µ–≤–æ–≥–∏'. –í —Ç–µ–ª–µ ‚Äî –±–æ–ª—å—à–µ –ª—ë–≥–∫–æ—Å—Ç–∏.",
    12: "üß© –î–µ–Ω—å 12: –ü–∞–º—è—Ç—å –∏ –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞—á–∏–Ω–∞—é—Ç –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—Ç—å—Å—è. –¢—ã –∑–∞–º–µ—á–∞–µ—à—å –¥–µ—Ç–∞–ª–∏.",
    13: "‚ö° –î–µ–Ω—å 13: –ú–µ–Ω—å—à–µ —É—Å—Ç–∞–ª–æ—Å—Ç–∏ –≤ —Ç–µ—á–µ–Ω–∏–µ –¥–Ω—è. –ü–æ–≤—ã—à–∞–µ—Ç—Å—è —Ñ–∏–∑–∏—á–µ—Å–∫–∞—è –≤—ã–Ω–æ—Å–ª–∏–≤–æ—Å—Ç—å.",
    14: "‚ù§Ô∏è –î–µ–Ω—å 14: –°–µ—Ä–¥—Ü–µ —Ä–∞–±–æ—Ç–∞–µ—Ç —Ä–æ–≤–Ω–æ. –î–∞–≤–ª–µ–Ω–∏–µ –≤ –Ω–æ—Ä–º–µ. –¢—ã —Å—Ç–∞–ª –±–æ–¥—Ä–µ–µ –∏ –∫—Ä–µ–ø—á–µ.",
    15: "üß† –î–µ–Ω—å 15: –¶–µ–Ω—Ç—Ä—ã —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏—è –≤ –º–æ–∑–≥–µ –Ω–∞—á–∏–Ω–∞—é—Ç —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞—Ç—å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ ‚Äî –±–µ–∑ –¥–æ–ø–∏–Ω–≥–∞.",
    16: "üî• –î–µ–Ω—å 16: –ñ–∏—Ä–æ—Å–∂–∏–≥–∞–Ω–∏–µ –∞–∫—Ç–∏–≤–∏—Ä—É–µ—Ç—Å—è. –ê–ª–∫–æ–≥–æ–ª—å –±–æ–ª—å—à–µ –Ω–µ –º–µ—à–∞–µ—Ç –º–µ—Ç–∞–±–æ–ª–∏–∑–º—É.",
    17: "üí§ –î–µ–Ω—å 17: –¢—ã —Å–ø–∏—à—å –ª—É—á—à–µ. –í–æ —Å–Ω–µ —Ç—ã –Ω–∞–∫–æ–Ω–µ—Ü-—Ç–æ —Ä–µ–∞–ª—å–Ω–æ –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—à—å—Å—è.",
    18: "üìà –î–µ–Ω—å 18: –ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ –≤—Å—ë —á–∞—â–µ —Ä–æ–≤–Ω–æ–µ. –¢—ã —á—É–≤—Å—Ç–≤—É–µ—à—å —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –≤–Ω—É—Ç—Ä–∏.",
    19: "üßΩ –î–µ–Ω—å 19: –ü—Ä–æ–¥–æ–ª–∂–∞–µ—Ç—Å—è –∫–ª–µ—Ç–æ—á–Ω–∞—è —Ä–µ–≥–µ–Ω–µ—Ä–∞—Ü–∏—è. –¢—ã –æ–±–Ω–æ–≤–ª—è–µ—à—å—Å—è –∏–∑–Ω—É—Ç—Ä–∏.",
    20: "üí° –î–µ–Ω—å 20: –ú–æ–∑–≥ —Ä–∞–±–æ—Ç–∞–µ—Ç –±—ã—Å—Ç—Ä–µ–µ. –ü–æ—è–≤–ª—è–µ—Ç—Å—è —è—Å–Ω–æ—Å—Ç—å, —Ä–µ—à–µ–Ω–∏—è –¥–∞—é—Ç—Å—è –ª–µ–≥—á–µ.",
    21: "üßò‚Äç‚ôÇÔ∏è –î–µ–Ω—å 21: –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–µ –∫–∞—á–µ–ª–∏ –ø–æ—á—Ç–∏ –∏—Å—á–µ–∑–ª–∏. –¢—ã –±–æ–ª—å—à–µ —Ö–æ–∑—è–∏–Ω —Å–≤–æ–µ–º—É —Å–æ—Å—Ç–æ—è–Ω–∏—é.",
    22: "üåü –î–µ–Ω—å 22: –°–∞–º–æ–æ—Ü–µ–Ω–∫–∞ —Ä–∞—Å—Ç—ë—Ç. –¢—ã —É–≤–∞–∂–∞–µ—à—å —Å–µ–±—è –∑–∞ —Ç–æ, —á—Ç–æ –¥–µ—Ä–∂–∏—à—å—Å—è.",
    23: "ü¶æ –î–µ–Ω—å 23: –¢—ã ‚Äî –ø—Ä–∏–º–µ—Ä —Å–∏–ª—ã. –£—Ä–æ–≤–µ–Ω—å —Å—Ç—Ä–µ—Å—Å–∞ –∑–∞–º–µ—Ç–Ω–æ —Å–Ω–∏–∂–∞–µ—Ç—Å—è.",
    24: "üßÉ –î–µ–Ω—å 24: –ñ–µ–ª–∞–Ω–∏–µ –ø–∏—Ç—å —É–º–µ–Ω—å—à–∞–µ—Ç—Å—è. –û—Ä–≥–∞–Ω–∏–∑–º –ø—Ä–∏–≤—ã–∫–∞–µ—Ç –∫ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –∂–∏–∑–Ω–∏.",
    25: "‚öôÔ∏è –î–µ–Ω—å 25: –¢—ã —Å—Ç–∞–ª –ø—Ä–æ–¥—É–∫—Ç–∏–≤–Ω–µ–µ. –ê–ª–∫–æ–≥–æ–ª—å –±–æ–ª—å—à–µ –Ω–µ –≤–æ—Ä—É–µ—Ç —Ç–≤–æ—ë –≤—Ä–µ–º—è –∏ —ç–Ω–µ—Ä–≥–∏—é.",
    26: "ü™û –î–µ–Ω—å 26: –õ—é–¥–∏ –∑–∞–º–µ—á–∞—é—Ç, —á—Ç–æ —Ç—ã —Å—Ç–∞–ª –≤—ã–≥–ª—è–¥–µ—Ç—å –ª—É—á—à–µ. –¢—ã –∏–∑–ª—É—á–∞–µ—à—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å.",
    27: "üìö –î–µ–Ω—å 27: –¢—ã –ø—Ä–∏–æ–±—Ä—ë–ª –Ω–∞–≤—ã–∫, –∫–æ—Ç–æ—Ä—ã–π –º–æ–∂–µ—Ç –∏–∑–º–µ–Ω–∏—Ç—å –≤—Å—ë. –°–∞–º–æ–æ–±–ª–∞–¥–∞–Ω–∏–µ ‚Äî —Å—É–ø–µ—Ä—Å–∏–ª–∞.",
    28: "üèÜ –î–µ–Ω—å 28: –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã —Å–¥–µ–ª–∞–ª —ç—Ç–æ. –ù–æ–≤—ã–π —Ç—ã ‚Äî —è—Å–Ω—ã–π, —ç–Ω–µ—Ä–≥–∏—á–Ω—ã–π, —Å–∏–ª—å–Ω—ã–π. –ì–æ—Ä–∂—É—Å—å —Ç–æ–±–æ–π!"
}

# Physical exercise recommendations
EXERCISE_RECOMMENDATIONS = [
    "–°–¥–µ–ª–∞–π 10 –ø—Ä–∏—Å–µ–¥–∞–Ω–∏–π, 10 –æ—Ç–∂–∏–º–∞–Ω–∏–π –æ—Ç —Å—Ç–µ–Ω—ã –∏ –ø–æ—Å—Ç–æ–π 20 —Å–µ–∫—É–Ω–¥ –≤ –ø–ª–∞–Ω–∫–µ.",
    "–°–¥–µ–ª–∞–π 15 –ø—Ä—ã–∂–∫–æ–≤ –Ω–∞ –º–µ—Å—Ç–µ, 10 —Å–∫—Ä—É—á–∏–≤–∞–Ω–∏–π –ª—ë–∂–∞ –∏ –≥–ª—É–±–æ–∫–∏–µ –≤–¥–æ—Ö–∏-–≤—ã–¥–æ—Ö–∏.",
    "–ü–æ—Å—Ç–∞–≤—å —Ä—É–∫–∏ –Ω–∞ –ø–æ—è—Å, —Å–¥–µ–ª–∞–π –∫—Ä—É–≥–æ–≤—ã–µ –¥–≤–∏–∂–µ–Ω–∏—è –±—ë–¥—Ä–∞–º–∏ –∏ —à–µ–µ–π –ø–æ 10 —Ä–∞–∑.",
    "–°–¥–µ–ª–∞–π 10 –≤—ã–ø–∞–¥–æ–≤ –≤–ø–µ—Ä—ë–¥, 10 –º–∞—Ö–æ–≤ —Ä—É–∫–∞–º–∏ –∏ 30 —Å–µ–∫—É–Ω–¥ –ø–ª–∞–Ω–∫–∏.",
    "–ü—Ä–æ–π–¥–∏ –ø–æ –∫–æ–º–Ω–∞—Ç–µ —Å –≤—ã—Å–æ–∫–∏–º –ø–æ–¥–Ω–∏–º–∞–Ω–∏–µ–º –∫–æ–ª–µ–Ω–µ–π 1 –º–∏–Ω—É—Ç—É –∏ —É–ª—ã–±–Ω–∏—Å—å —Å–µ–±–µ –≤ –∑–µ—Ä–∫–∞–ª–æ.",
    "–í–∫–ª—é—á–∏ –ª—é–±–∏–º—É—é –ø–µ—Å–Ω—é, —Ç–∞–Ω—Ü—É–π –ø–æ–¥ –Ω–µ—ë 3 –º–∏–Ω—É—Ç—ã ‚Äî –±–µ–∑ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏!",
    "–°–¥–µ–ª–∞–π 10 –º–µ–¥–ª–µ–Ω–Ω—ã—Ö –≥–ª—É–±–æ–∫–∏—Ö –ø—Ä–∏—Å–µ–¥–∞–Ω–∏–π –∏ –ø–æ—Ç—Ä—è—Å–∏ –∫–∏—Å—Ç—è–º–∏ —Ä—É–∫ 30 —Å–µ–∫—É–Ω–¥.",
    "–ü–æ—Å—Ç–æ–π –Ω–∞ –æ–¥–Ω–æ–π –Ω–æ–≥–µ –ø–æ 20 —Å–µ–∫—É–Ω–¥ –Ω–∞ –∫–∞–∂–¥—É—é ‚Äî —ç—Ç–æ —É–ª—É—á—à–∞–µ—Ç –±–∞–ª–∞–Ω—Å –∏ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—é.",
    "–°–¥–µ–ª–∞–π 20 —à–∞–≥–æ–≤ –Ω–∞ –º–µ—Å—Ç–µ —Å –≤—ã—Ç—è–Ω—É—Ç—ã–º–∏ —Ä—É–∫–∞–º–∏ –≤–≤–µ—Ä—Ö.",
    "–ü—Ä–∏–º–∏ –ø–æ–∑—É —Ä–µ–±—ë–Ω–∫–∞ –Ω–∞ –ø–æ–ª—É (–π–æ–≥–∞), –ø–æ—Å–∏–¥–∏ —Ç–∞–∫ 1 –º–∏–Ω—É—Ç—É. –ó–∞—Ç–µ–º –ø–æ—Ç—è–Ω–∏—Å—å –≤–≤–µ—Ä—Ö."
]

# Daily questions sets
DAILY_QUESTIONS_MORNING = [
    "–ö–∞–∫ —Ç—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å —Å–µ–≥–æ–¥–Ω—è?",
    "–ë—ã–ª–∞ –ª–∏ —É —Ç–µ–±—è —Å–µ–≥–æ–¥–Ω—è —Ç—Ä–µ–≤–æ–∂–Ω–æ—Å—Ç—å?",
    "–ï—Å—Ç—å –ª–∏ —á—É–≤—Å—Ç–≤–æ —É—Å—Ç–∞–ª–æ—Å—Ç–∏ —Å–µ–π—á–∞—Å?",
    "–¢—ã –æ—â—É—â–∞–µ—à—å –ø—Ä–æ–≥—Ä–µ—Å—Å?",
    "–•–æ—á–µ—Ç—Å—è –ª–∏ —Ç–µ–±–µ —Å–µ–≥–æ–¥–Ω—è –≤—ã–ø–∏—Ç—å?"
]

DAILY_QUESTIONS_EVENING = [
    "–ö–∞–∫ —Ç–≤–æ—ë –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ —Å–µ–π—á–∞—Å?",
    "–¢—ã –¥–æ–≤–æ–ª–µ–Ω —Å–≤–æ–∏–º –¥–Ω—ë–º?",
    "–¢–µ–±–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Ç–æ, —á—Ç–æ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–ª?",
    "–ï—Å—Ç—å –ª–∏ —Å–µ–π—á–∞—Å —Ä–∞–∑–¥—Ä–∞–∂–µ–Ω–∏–µ –∏–ª–∏ —É–Ω—ã–Ω–∏–µ?",
    "–¢—ã —á—É–≤—Å—Ç–≤—É–µ—à—å —É–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å –≤ —Å–µ–±–µ?"
]

# Response reactions
RESPONSE_REACTIONS = {
    "–¥–∞": "–û—Ç–ª–∏—á–Ω–æ! –î–≤–∏–≥–∞–π—Å—è –¥–∞–ª—å—à–µ –≤ —Ç–æ–º –∂–µ –¥—É—Ö–µ!",
    "–Ω–µ—Ç": "–ü–æ–ø—Ä–æ–±—É–π –Ω–µ –¥–∞–≤–∏—Ç—å –Ω–∞ —Å–µ–±—è. –ó–∞–≤—Ç—Ä–∞ –º–æ–∂–µ—Ç –±—ã—Ç—å –ª–µ–≥—á–µ.",
    "–Ω–µ –æ—á–µ–Ω—å": "–ò–Ω–æ–≥–¥–∞ —Ç–∞–∫ –±—ã–≤–∞–µ—Ç. –°–¥–µ–ª–∞–π —á—Ç–æ-—Ç–æ –ø—Ä–∏—è—Ç–Ω–æ–µ –¥–ª—è —Å–µ–±—è.",
    "–Ω–µ –æ—Å–æ–±–æ": "–≠—Ç–æ –Ω–æ—Ä–º–∞–ª—å–Ω–æ. –í—Å—ë —Å—Ç–∞–±–∏–ª–∏–∑–∏—Ä—É–µ—Ç—Å—è —Å–æ –≤—Ä–µ–º–µ–Ω–µ–º."
}

# Create keyboard
def get_main_keyboard():
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"), KeyboardButton(text="–ñ–µ–ª–∞–Ω–∏–µ –≤—ã–ø–∏—Ç—å")],
            [KeyboardButton(text="AI –º–æ—Ç–∏–≤–∞—Ü–∏—è"), KeyboardButton(text="AI –≤–æ–ø—Ä–æ—Å")]
        ],
        resize_keyboard=True,
        one_time_keyboard=False
    )
    return keyboard

# Initialize user data structure
def init_user_data(user_id: str):
    today = datetime.now().strftime('%Y-%m-%d')
    if user_id not in user_data:
        user_data[user_id] = {
            "start_date": today,
            "thoughts": [],
            "urges": [],
            "last_recommendation": None,
            "last_question_morning": None,
            "last_question_evening": None
        }
        save_data()

# Calculate current day
def get_current_day(user_id: str) -> int:
    if user_id not in user_data:
        return 0
    start_date = datetime.strptime(user_data[user_id]['start_date'], '%Y-%m-%d')
    current_day = (datetime.now() - start_date).days + 1
    return max(1, min(current_day, 28))

# Handlers
@router.message(Command("start"))
async def start_challenge(message: types.Message):
    user_id = str(message.from_user.id)
    init_user_data(user_id)
    
    if user_id in user_data:
        current_day = get_current_day(user_id)
        await message.answer(
            f"–¢—ã –Ω–∞—á–∞–ª 28-–¥–Ω–µ–≤–Ω—ã–π —Ç—Ä–µ–∑–≤—ã–π —á–µ–ª–ª–µ–Ω–¥–∂. –Ø –±—É–¥—É —Å —Ç–æ–±–æ–π –∫–∞–∂–¥—ã–π –¥–µ–Ω—å. üí™\n\n"
            f"–°–µ–≥–æ–¥–Ω—è —É —Ç–µ–±—è –¥–µ–Ω—å {current_day}.",
            reply_markup=get_main_keyboard()
        )
    else:
        await message.answer(
            "–¢—ã —É–∂–µ –Ω–∞—á–∞–ª —á–µ–ª–ª–µ–Ω–¥–∂. –ù–µ —Ç–æ—Ä–æ–ø–∏ —Å–æ–±—ã—Ç–∏—è ‚Äî –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –±—É–¥–µ—Ç –∑–∞–≤—Ç—Ä–∞. ‚òùÔ∏è",
            reply_markup=get_main_keyboard()
        )

@router.message(Command("–º—ã—Å–ª—å"))
async def record_thought(message: types.Message):
    user_id = str(message.from_user.id)
    init_user_data(user_id)
    
    text = message.text.replace('/–º—ã—Å–ª—å', '').strip()
    if text:
        user_data[user_id]['thoughts'].append({
            "date": datetime.now().strftime('%Y-%m-%d'),
            "text": text
        })
        save_data()
        await message.answer("–ú—ã—Å–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –Ø –Ω–∞–ø–æ–º–Ω—é –æ–± —ç—Ç–æ–º –ø–æ–∑–∂–µ –¥–ª—è –≤–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏—è!")
    else:
        await message.answer("–ù–∞–ø–∏—à–∏ —Å–≤–æ—é –º—ã—Å–ª—å –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /–º—ã—Å–ª—å")

@router.message(Command("—Ö–æ—á—É"))
async def record_urge(message: types.Message):
    user_id = str(message.from_user.id)
    init_user_data(user_id)
    
    user_data[user_id]['urges'].append(datetime.now().strftime('%Y-%m-%d %H:%M'))
    save_data()
    await message.answer("–°–ø–∞—Å–∏–±–æ, —è –∑–∞–ø–∏—Å–∞–ª —Ç–≤–æ—ë –∂–µ–ª–∞–Ω–∏–µ. –ú—ã —Å–º–æ–∂–µ–º –æ—Ç—Å–ª–µ–¥–∏—Ç—å, –∫–∞–∫ —á–∞—Å—Ç–æ —ç—Ç–æ –ø—Ä–æ–∏—Å—Ö–æ–¥–∏—Ç.")

@router.message(F.text == "–ñ–µ–ª–∞–Ω–∏–µ –≤—ã–ø–∏—Ç—å")
async def handle_urge_button(message: types.Message):
    user_id = str(message.from_user.id)
    init_user_data(user_id)
    
    # Log the urge
    user_data[user_id]['urges'].append(datetime.now().strftime('%Y-%m-%d %H:%M'))
    
    current_day = get_current_day(user_id)
    recent_urges = len(user_data[user_id]['urges'])
    
    try:
        # Generate AI support message
        ai_support = generate_urge_support_message(current_day, recent_urges)
        support_text = f"üíô {ai_support}\n\n"
    except Exception as e:
        logging.error(f"AI urge support error: {e}")
        support_text = "üíô –≠—Ç–æ —á—É–≤—Å—Ç–≤–æ –ø—Ä–æ–π–¥–µ—Ç. –¢—ã —É–∂–µ –ø—Ä–æ—à–µ–ª —Å—Ç–æ–ª—å–∫–æ ‚Äî —Ç—ã —Å–ø—Ä–∞–≤–∏—à—å—Å—è –∏ —Å–µ–π—á–∞—Å.\n\n"
    
    # Give immediate exercise recommendation
    recommendation = random.choice(EXERCISE_RECOMMENDATIONS)
    user_data[user_id]['last_recommendation'] = recommendation
    save_data()
    
    await message.answer(
        f"üìå –ñ–µ–ª–∞–Ω–∏–µ –∑–∞–ø–∏—Å–∞–Ω–æ. {support_text}"
        f"–ü–æ–ø—Ä–æ–±—É–π: {recommendation}\n\n"
        f"–ü–æ–º–æ–≥–ª–æ –ª–∏ —ç—Ç–æ? –ù–∞–ø–∏—à–∏: –î–∞ / –ù–µ—Ç",
        reply_markup=get_main_keyboard()
    )

@router.message(F.text == "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def show_statistics(message: types.Message):
    user_id = str(message.from_user.id)
    init_user_data(user_id)
    
    current_day = get_current_day(user_id)
    total_urges = len(user_data[user_id]['urges'])
    total_thoughts = len(user_data[user_id]['thoughts'])
    
    stats_message = f"üìä –¢–≤–æ—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n\n"
    stats_message += f"üìÖ –î–µ–Ω—å —á–µ–ª–ª–µ–Ω–¥–∂–∞: {current_day}/28\n"
    stats_message += f"üéØ –ü—Ä–æ–≥—Ä–µ—Å—Å: {(current_day/28)*100:.1f}%\n"
    stats_message += f"üí≠ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ –º—ã—Å–ª–µ–π: {total_thoughts}\n"
    stats_message += f"üö® –ñ–µ–ª–∞–Ω–∏–π –≤—ã–ø–∏—Ç—å: {total_urges}\n"
    
    if current_day >= 7:
        stats_message += f"\nüåü –¢—ã –ø—Ä–æ—à–µ–ª —É–∂–µ {current_day} –¥–Ω–µ–π! –≠—Ç–æ —Å–µ—Ä—å–µ–∑–Ω–æ–µ –¥–æ—Å—Ç–∏–∂–µ–Ω–∏–µ!"
    elif current_day >= 3:
        stats_message += f"\nüí™ {current_day} –¥–Ω—è ‚Äî –æ—Ç–ª–∏—á–Ω–æ–µ –Ω–∞—á–∞–ª–æ!"
    else:
        stats_message += f"\nüî• –ö–∞–∂–¥—ã–π –¥–µ–Ω—å –≤–∞–∂–µ–Ω! –î–µ—Ä–∂–∏—Å—å!"
    
    await message.answer(stats_message, reply_markup=get_main_keyboard())

@router.message(F.text == "AI –º–æ—Ç–∏–≤–∞—Ü–∏—è")
async def ai_motivation(message: types.Message):
    user_id = str(message.from_user.id)
    init_user_data(user_id)
    
    await message.answer("ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—É—é –º–æ—Ç–∏–≤–∞—Ü–∏—é...")
    
    current_day = get_current_day(user_id)
    user_context = {
        'total_urges': len(user_data[user_id]['urges']),
        'total_thoughts': len(user_data[user_id]['thoughts'])
    }
    
    try:
        ai_message = generate_personalized_motivation(current_day, user_context)
        await message.answer(f"‚ú® {ai_message}", reply_markup=get_main_keyboard())
    except Exception as e:
        logging.error(f"AI motivation error: {e}")
        await message.answer("–ò–∑–≤–∏–Ω–∏, –Ω–µ –º–æ–≥—É —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –º–æ—Ç–∏–≤–∞—Ü–∏—é —Å–µ–π—á–∞—Å. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.", reply_markup=get_main_keyboard())

@router.message(F.text == "AI –≤–æ–ø—Ä–æ—Å")
async def ai_question(message: types.Message):
    user_id = str(message.from_user.id)
    init_user_data(user_id)
    
    await message.answer("ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤–æ–ø—Ä–æ—Å –¥–ª—è —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è...")
    
    current_day = get_current_day(user_id)
    
    try:
        ai_question = generate_reflection_prompt(current_day)
        await message.answer(f"ü§î {ai_question}", reply_markup=get_main_keyboard())
    except Exception as e:
        logging.error(f"AI question error: {e}")
        await message.answer("–ò–∑–≤–∏–Ω–∏, –Ω–µ –º–æ–≥—É —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å —Å–µ–π—á–∞—Å. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.", reply_markup=get_main_keyboard())

@router.message()
async def handle_responses(message: types.Message):
    user_id = str(message.from_user.id)
    init_user_data(user_id)
    text = message.text.strip().lower()
    
    # Handle responses to exercise recommendations
    if text in ["–¥–∞", "–Ω–µ—Ç", "–Ω–µ –æ—á–µ–Ω—å", "–Ω–µ –æ—Å–æ–±–æ"]:
        reaction = RESPONSE_REACTIONS.get(text, "–°–ø–∞—Å–∏–±–æ –∑–∞ –æ—Ç–≤–µ—Ç!")
        await message.answer(reaction, reply_markup=get_main_keyboard())
        
        # If exercise didn't help, suggest another
        if text in ["–Ω–µ—Ç", "–Ω–µ –ø–æ–º–æ–≥–ª–æ"]:
            last_rec = user_data[user_id].get("last_recommendation")
            available_recs = [r for r in EXERCISE_RECOMMENDATIONS if r != last_rec]
            new_recommendation = random.choice(available_recs)
            user_data[user_id]['last_recommendation'] = new_recommendation
            save_data()
            
            await message.answer(
                f"–•–æ—Ä–æ—à–æ, —Ç–æ–≥–¥–∞ –ø–æ–ø—Ä–æ–±—É–π —ç—Ç–æ: {new_recommendation}\n\n–ü–æ–º–æ–≥–ª–æ –ª–∏ —ç—Ç–æ? –î–∞ / –ù–µ—Ç",
                reply_markup=get_main_keyboard()
            )
        elif text in ["–¥–∞", "–ø–æ–º–æ–≥–ª–æ"]:
            await message.answer("–†–∞–¥ —ç—Ç–æ —Å–ª—ã—à–∞—Ç—å! –¢—ã –º–æ–ª–æ–¥–µ—Ü! ‚ú®", reply_markup=get_main_keyboard())
    
    else:
        await message.answer(
            "–ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –Ω–∏–∂–µ –∏–ª–∏ –∫–æ–º–∞–Ω–¥—ã:\n"
            "‚Ä¢ /start - –Ω–∞—á–∞—Ç—å —á–µ–ª–ª–µ–Ω–¥–∂\n"
            "‚Ä¢ /–º—ã—Å–ª—å [—Ç–µ–∫—Å—Ç] - —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å –º—ã—Å–ª—å\n"
            "‚Ä¢ /—Ö–æ—á—É - –∑–∞–ø–∏—Å–∞—Ç—å –∂–µ–ª–∞–Ω–∏–µ –≤—ã–ø–∏—Ç—å\n"
            "‚Ä¢ AI –º–æ—Ç–∏–≤–∞—Ü–∏—è - –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞\n"
            "‚Ä¢ AI –≤–æ–ø—Ä–æ—Å - —Ä–∞–∑–º—ã—à–ª–µ–Ω–∏—è –¥–ª—è —Ä–æ—Å—Ç–∞",
            reply_markup=get_main_keyboard()
        )

# Scheduled tasks
async def send_daily_motivation():
    for user_id in user_data:
        try:
            current_day = get_current_day(user_id)
            if current_day <= 28:
                # Try AI motivation first, fallback to predefined
                try:
                    user_context = {
                        'total_urges': len(user_data[user_id]['urges']),
                        'total_thoughts': len(user_data[user_id]['thoughts'])
                    }
                    ai_motivation = generate_personalized_motivation(current_day, user_context)
                    motivation = f"ü§ñ {ai_motivation}"
                except Exception as ai_error:
                    logging.error(f"AI motivation failed for {user_id}: {ai_error}")
                    motivation = MOTIVATIONS_BY_DAY.get(current_day, "–¢—ã –¥–µ—Ä–∂–∏—à—å—Å—è –æ—Ç–ª–∏—á–Ω–æ! –ü—Ä–æ–¥–æ–ª–∂–∞–π!")
                
                await bot.send_message(user_id, f"–î–µ–Ω—å {current_day} ‚Äî {motivation}")
        except Exception as e:
            logging.error(f"Error sending motivation to {user_id}: {e}")

async def ask_morning_question():
    today = datetime.now().strftime('%Y-%m-%d')
    for user_id in user_data:
        try:
            if user_data[user_id].get("last_question_morning") != today:
                question = random.choice(DAILY_QUESTIONS_MORNING)
                await bot.send_message(user_id, f"üåÖ {question}")
                user_data[user_id]['last_question_morning'] = today
        except Exception as e:
            logging.error(f"Error sending morning question to {user_id}: {e}")
    save_data()

async def ask_evening_question():
    today = datetime.now().strftime('%Y-%m-%d')
    for user_id in user_data:
        try:
            if user_data[user_id].get("last_question_evening") != today:
                question = random.choice(DAILY_QUESTIONS_EVENING)
                await bot.send_message(user_id, f"üåô {question}")
                user_data[user_id]['last_question_evening'] = today
        except Exception as e:
            logging.error(f"Error sending evening question to {user_id}: {e}")
    save_data()

# Main function
async def main():
    # Setup logging
    logging.basicConfig(level=logging.INFO)
    
    # Test AI connection
    if test_ai_connection():
        logging.info("AI motivator connected successfully")
    else:
        logging.warning("AI motivator connection failed - using fallback messages")
    
    # Register handlers
    dp.include_router(router)
    
    # Setup scheduler
    scheduler.add_job(send_daily_motivation, 'cron', hour=9, minute=0)
    scheduler.add_job(ask_morning_question, 'cron', hour=13, minute=0)
    scheduler.add_job(ask_evening_question, 'cron', hour=20, minute=0)
    scheduler.start()
    
    logging.info("Starting 28-day Sobriety Challenge Bot with AI Features...")
    
    # Start polling
    await dp.start_polling(bot)

if __name__ == '__main__':
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("Bot stopped by user")
    except Exception as e:
        print(f"Fatal error: {e}")
